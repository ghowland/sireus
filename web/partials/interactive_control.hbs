<div id="interactive_control" class="is-hidden-not">
    <div class="content">
        <div class="box has-background-info has-text-white">
            <div class="columns">
                <div class="column is-three-quarters">
                    <h1 class="is-5 has-text-white">Interactive Controls</h1>
                </div>
                <div class="column" style="text-align: right">
                    <span style="padding-left: 1.5em; font-size: 1.4em;">
                        <span class="icon has-text-white has-tooltip-arrow" data-tooltip="Close" style="border-bottom: 0 solid !important;">
                          <i class="fa-solid fa-circle-xmark" onclick="$('#interactive_control').toggleClass('is-hidden')"></i>
                        </span>
                    </span>
                </div>
            </div>

            <div class="has-background-white has-text-black no-draggon" style="padding: 1.5em;">
                <div class="columns">
                    <div class="column is-three-quarters">
                        <h4>Set Interactive Time Range</h4>
                        <p>All interactive sessions use a set time range to cache metrics data and perform quick tests.</p>
                    </div>
                    <div class="column">
                        <div class="field">
                            <input id="interQueryTime" type="checkbox" name="interQueryTime" id="interQueryTime" class="switch is-outlined is-info" checked="checked" onchange="ToggleCheckboxData(this, 'useQueryTime')">
                            <label for="interQueryTime">Query Time</label>
                        </div>
                        <div class="field">
                            <input id="interPlayForward" type="checkbox" name="interPlayForward" id="interPlayForward" class="switch is-outlined is-info" onchange="ToggleCheckboxData(this, 'playForward')">
                            <label for="interPlayForward">Play</label>
                        </div>
                    </div>
                </div>
                <div class="columns">
                    <div class="column">
                        <p>Query Time Start: <span id="time_control_start"></span></p>
                    </div>
                    <div class="column">
                        <input id="queryStartTime" class="input" type="datetime" value="01-11-2023" onchange="SetTimeControl('time_control_slider_scrubber', 'queryScrubTime', 'time_control_scrubber')">
                    </div>
                    <div class="column">
                        <p>Query Time Duration:</p>
                    </div>
                    <div class="column">
                        <div class="field">
                            <p class="control has-icons-left has-icons-right">
                                <input class="input" type="duration" id="queryDuration" placeholder="Duration in Minutes" value="15" onchange="SetTimeControl('time_control_slider_scrubber', 'queryScrubTime', 'time_control_scrubber')">
                                <span class="icon is-small is-left">
                                    <i class="fa-regular fa-clock"></i>
                                </span>
                            </p>
                        </div>
                    </div>
                    <div class="column">
                        <p>Query Time Scrubber: <strong><span id="time_control_scrubber"></span></strong></p>
                    </div>
                    <div class="column">
                        <input class="slider is-fullwidth is-info" step="1" min="0" max="100" value="0" type="range" id="time_control_slider_scrubber" onchange="SetTimeControl('time_control_slider_scrubber', 'queryScrubTime', 'time_control_scrubber')">
                    </div>
                </div>

                <h4>Override States</h4>
                <p>Overriding states will only allow actions that match these states to be shown.  Overriding states will be turned </p>
                <div class="field">
                    <input class="is-checkradio has-background-color is-info" id="enable_state_override_1" type="checkbox" name="state_override_1" checked="checked">
                    <label for="enable_state_override_1">State Override: <span id=""></span></label>
                </div>
                <button class="button is-warning">
                    <span class="icon is-small">
                      <i class="fa-solid fa-arrows-spin"></i>
                    </span>
                    <span>Add State Override</span>
                </button>
                <p></p>

                <h4>Override Variables</h4>
                <div class="field">
                    <input class="is-checkradio has-background-color is-info" id="enable_var_override_1" type="checkbox" name="var_override_1" checked="checked">
                    <label for="enable_var_override_1">Variable Override: <span id=""></span></label>
                </div>
                <button class="button is-warning">
                    <span class="icon is-small">
                      <i class="fa-solid fa-chart-line"></i>
                    </span>
                    <span>Add Variable Override</span>
                </button>
            </div>
        </div>
    </div>
</div>
<script>
    // Global interactive control data, gets passed to RPC, and updated each time
    var interactiveControl = {
        queryStartTime: undefined,
        queryDuration: 60,
        queryScrubTime: undefined,
        playFromQueryTime: true,
    };


    // Configure the datetime picker
    var picker = $('#queryStartTime').tempusDominus({
        // format: 'yyyy-MM-dd HH:mm',
    });

    function ZeroPad(num, places) {
        var zero = places - num.toString().length + 1;
        return Array(+(zero > 0 && zero)).join("0") + num;
    }

    function PrintUTCTime(d) {
        var output = d.getUTCFullYear() + '-' + ZeroPad(d.getUTCMonth() + 1, 2) + '-' + ZeroPad(d.getUTCDate(), 2) + ' ' + d.getUTCHours() + ':' + ZeroPad(d.getUTCMinutes(), 2) + ':' + ZeroPad(d.getUTCSeconds(), 2) + ' UTC';

        return output;
    }

    function GetStartInputMillis(datePickerElementId) {
        var fullString = $('#'+datePickerElementId).val();
        fullSplitArray = fullString.replace(',', '').split(" ")

        fullDate = fullSplitArray[0]
        fullTime = fullSplitArray[1]
        fullAMPM = fullSplitArray[2]

        // alert('Full Date: ' + fullDate + '  Full Time: ' + fullTime + '  AMPM: ' + fullAMPM)

        dateArray = fullDate.split("/")
        timeArray = fullTime.split(":")

        // alert('Date: ' + dateArray + '  Time: ' + timeArray + '  AMPM: ' + fullAMPM)
        // alert('D0: ' + dateArray[0] + '  D1: ' + dateArray[1] + '  D2: ' + dateArray[2])

        var day = parseInt(dateArray[1]);
        var month = parseInt(dateArray[0]);
        var year = parseInt(dateArray[2]);

        hours = parseInt(timeArray[0])
        minutes = parseInt(timeArray[1])

        var test = 'Day: ' + day + '  Month: ' + month + '  Year: ' + year + '  Hours: ' + hours + '  Minutes: ' + minutes;

        if (fullAMPM === 'PM') {
            hours += 12;
        }

        var d = new Date();
        d.setUTCDate(day)
        d.setUTCMonth(month)
        d.setUTCFullYear(year)
        d.setUTCHours(hours)
        d.setUTCMinutes(minutes)
        d.setUTCSeconds(0)
        d.setUTCMilliseconds(0)

        var millis = d.getTime()

        // alert("Get Start: " + millis + ' -- ' + test + ' -- ' + d.toUTCString())

        return millis
    }

    function GetDurationMillis(durationElementId) {
        var fullString = $('#'+durationElementId).val();
        var minutes = parseFloat(fullString);

        var millis = minutes * 60 * 1000;
        return millis;
    }

    function ToggleCheckboxData(element, varNam) {
        var checked = $(element).is(':checked');
        if (checked) {
            $(element).attr('checked', 'checked');
            interactiveControl[varNam] = true;
        }
        else {
            $(element).removeAttr('checked');
            interactiveControl[varNam] = false;
        }
    }

    function SetTimeControl(valueElementId, interactiveVarName, outputElementId) {
        var d = new Date();

        var startMillis = GetStartInputMillis('queryStartTime');
        var durationMillis = GetDurationMillis('queryDuration');

        d.setTime(startMillis)

        var timeNum = d.getTime();

        // Get the slider value (0-100)
        var value = $('#'+valueElementId).val();

        // Timespan is dynamic based on duration, but there are always 100 segments because of the scrubber
        var timeSpan = durationMillis / 100;

        var d2 = new Date(timeNum + (value * timeSpan));

        // Set the duration.  Should this happen somewhere else?
        interactiveControl['queryStartTime'] = startMillis;
        interactiveControl['queryDuration'] = durationMillis;

        interactiveControl['useQueryTime'] = $("#interQueryTime").is(':checked');
        interactiveControl['playForward'] = $("#interPlayForward").is(':checked');

        // alert('Query Time: ' + interactiveControl['useQueryTime'] + '  Play: ' + interactiveControl['playForward'])

        // Set the Scrubber time UTC time in milliseconds
        interactiveControl[interactiveVarName] = d2.getTime();

        // Write the output
        var output = PrintUTCTime(d2).replace(' UTC', '');
        $('#'+outputElementId).html(output);
    }

    SetTimeControl('time_control_slider_scrubber', 'queryScrubTime', 'time_control_scrubber');
</script>
