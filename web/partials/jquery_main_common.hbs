<script>
    // Configure any .dropdown select elements
    $(function () {
        // We can tell the DOM loaded and Query has initialized
        $('html').addClass ( 'dom-loaded' );

        // Makes all the dropdowns work
        $('.dropdown').each(function(i, obj) {
            $(obj).click(function(event) {
                $(obj).toggleClass('is-active');
            });
        });


        $(document).click(function(e) {
            $('.block')
                    .not($('.block').has($(e.target)))
                    .children('.dropdown')
                    .removeClass('is-active');
        });

        //$('<footer>Appended with Cash</footer>').appendTo ( document.body );
    });
</script>

<script>
    // Configure Draggable items
    const position = { x: 0, y: 0 }

    // Set elements to be draggable with the "draggon" class, and ignore elements with "no-draggon"
    interact('.draggon').draggable({onmove: dragMoveListener, ignoreFrom: '.no-draggon'})
    function dragMoveListener (event) {
        var target = event.target;

        // Keep the dragged position in the data-x/data-y attributes
        var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
        var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

        // Translate the element
        target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, ' + y + 'px)';

        // Update the position attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
    }
</script>

<script>
    // Saves or Loads the Session UUID from local storage
    function ProcessInteractiveControlData(interactiveControlData) {
        // Get the Session UUID from the server, it sets this, and this is how we ensure we keep getting the same Interactive data
        interactiveControl['sessionUUID'] = interactiveControlData['sessionUUID']

        // if we didn't get a sessionUUID, so see if we already have one and use that instead
        if (interactiveControl['sessionUUID'] === 0 || interactiveControl['sessionUUID'] === undefined) {
            var interactiveControlJSON = localStorage.getItem('interactiveControl');
            try {
                var interactiveControlLocal = JSON.parse(interactiveControlJSON)
                if (interactiveControlLocal['sessionUUID'] !== undefined) {
                    interactiveControl['sessionUUID'] = interactiveControlLocal['sessionUUID']
                }
            } catch(e) {
                // alert("Couldn't parse Local Storage JSON, next page refresh should fix it: " + e);
            }
        }

        // Always save it.  So we can use it everywhere.
        localStorage.setItem('interactiveControl', JSON.stringify(interactiveControl));
    }

    function objToString (obj) {
        let str = '';
        for (const [p, val] of Object.entries(obj)) {
            str += `${p}::${val}\n`;
        }
        return str;
    }
</script>

<script>
    // Handle page display issues by saving them to local storage, and verifying when we update the HTML with jQuery
    function ToggleClassAndSave(elementId, className, saveKey) {
        $(elementId).toggleClass(className);
        var hasClassBool = $(elementId).hasClass(className);
        // alert('Toggle: ' + elementId + '  Class: ' + className + '  Save: ' + saveKey + ' Has Class: ' + hasClassBool)
        localStorage.setItem(saveKey, hasClassBool)
    }
</script>

<script>
    // Live Update Control
    var LiveDataUpdate = true;
    var LiveDataUpdateScheduled = false;
    var LastAPITarget = '';
    var LastInputData = {};
    function UpdateLiveDataUpdate() {
        var isChecked = ToggleCheckboxData('#liveDataUpdate', 'live_data_update');
        if (isChecked === true) {
            LiveDataUpdate = true;
            ScheduleLiveUpdate(0);
        } else {
            LiveDataUpdate = false;
        }
    }
</script>

<script>
    // Handle page reloads
    function HandlePageDataReloads(apiTarget, inputDataJSON, interactiveControlDataJSON) {
        // Configure the Reload Bot RPC, using our input data we go from our response.  Also reuses SessionUUID from local storage, if available
        var inputData = JSON.parse(inputDataJSON);
        var interactiveControlData = JSON.parse(interactiveControlDataJSON);

        ProcessInteractiveControlData(interactiveControlData)
        inputData['interactive_control'] = JSON.stringify(interactiveControl);

        // Save this, so we can use it if we turn off LiveDataUpdate
        LastAPITarget = apiTarget;
        LastInputData = inputData;

        // If we want to perform a Live Data Update, schedule the next one
        if (LiveDataUpdate) {
            ScheduleLiveUpdate(1500);
        }
    }

    function ScheduleLiveUpdate(scheduleDelayMilli) {
        setTimeout(function() { RPC(LastAPITarget, LastInputData) }, scheduleDelayMilli)
        LiveDataUpdateScheduled = true;
    }

</script>
